@page "/ticket"

@rendermode InteractiveServer

@inject ITicketService ticketService

<MudPopoverProvider />
<SectionContent SectionName="page-title">Ticket Management</SectionContent>

<style>
    .filter-panel {
        padding:0 20px;
        position: relative;
        background-color: var(--light-green);
        width: 100%;
    }

    .mud-input {
        background-color: white !important;
    }

    .mud-elevation-1 {
        box-shadow: none !important;
    }

    .mud-table-row {
        cursor: pointer !important;
    }

    .mud-grid-item {
        padding-bottom: .3rem;
    }
</style>

<div class="filter-panel">
    <MudGrid>
        <MudItem>
            <MudTextField 
                Class="pt-2"
                Variant="Variant.Outlined"

                />
        </MudItem>
    </MudGrid>
</div>

<MudDataGrid @ref="dataGrid" 
    T="GetTicketResponse" 
    SortMode="@SortMode.None" 
    ServerData="ServerReload" 
>
    <Columns>
        <PropertyColumn Property="x => x.TicketIdView" Title="Ticket ID" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.Product" />
        <PropertyColumn Property="x => x.Category" />
        <PropertyColumn Property="x => x.Priority" />
        <PropertyColumn Property="x => x.Status" />
        <PropertyColumn Property="x => x.RaisedBy" Title="Raised By" />
        <PropertyColumn Property="x => x.ExpectedDate" Title="Expected Date" Format="yyyy-MM-dd"/>
        <PropertyColumn Property="x => x.CreatedDate" Title="Created Date" Format="yyyy-MM-dd" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="GetTicketResponse" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<GetTicketResponse> dataGrid;
    string searchString = null;

    private async Task<GridData<GetTicketResponse>> ServerReload(GridState<GetTicketResponse> state)
    {
        IEnumerable<GetTicketResponse> getTickets = ticketService.GetTickets(new Domain.DTO.Request.GetTicketRequest());

        await Task.Delay(300);

        var totalItems = getTickets.Count();

        var pagedData = getTickets.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<GetTicketResponse>
        {
            TotalItems = totalItems,
            Items = pagedData
        };
    }
}
