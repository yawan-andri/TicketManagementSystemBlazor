@page "/ticket"

@rendermode InteractiveServer

@inject ITicketService ticketService
@inject ICriteriaService criteriaService
@inject IAccountService accountService
@inject NavigationManager nav

<MudPopoverProvider />
<SectionContent SectionName="page-title">Ticket Management</SectionContent>

<style>
    .filter-panel {
        padding:0 20px;
        position: relative;
        background-color: var(--light-green);
        width: 100%;
    }

    .mud-input {
        background-color: white !important;
    }

    .mud-elevation-1 {
        box-shadow: none !important;
    }

    .mud-table-row {
        cursor: pointer !important;
    }

    .mud-grid-item {
        padding-top: .3rem !important;
        padding-bottom: .3rem;
    }
</style>

<div class="filter-panel">
    <MudGrid>
        <MudItem>
            <MudTextField 
                @bind-Value="Summary"
                Class="pt-2"
                Variant="Variant.Outlined"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                AdornmentColor="Color.Dark" />
        </MudItem>
        <MudItem>
            <MultiSelect @ref="productDDL" elements="products" label="Product"></MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect @ref="priorityDDL" elements="priorities" label="Priority"></MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect @ref="categoryDDL" elements="categories" label="Category"></MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect @ref="statusDDL" elements="status" label="Status"></MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect @ref="raisedbyDDL" elements="raisedby" label="Raised By"></MultiSelect>
        </MudItem>
        <MudItem class="d-flex align-center flex-grow-1 gap-3">
            <MudButton Variant="Variant.Filled" @onclick="() => dataGrid.ReloadServerData()" Color="Color.Primary">
                <MudText>Search</MudText>
            </MudButton>
            <MudButton Variant="Variant.Filled" @onclick="Reset" Color="Color.Dark">
                <MudText>Reset</MudText>
            </MudButton>
        </MudItem>
    </MudGrid>
</div>

<MudDataGrid @ref="dataGrid" 
    T="GetTicketResponse" 
    SortMode="@SortMode.None" 
    ServerData="ServerReload" 
    Hover="true"
    RowClick="RowClick"
>
    <Columns>
        <PropertyColumn Property="x => x.TicketIdView" Title="Ticket ID" />
        <PropertyColumn Property="x => x.Summary" />
        <PropertyColumn Property="x => x.Product" />
        <PropertyColumn Property="x => x.Category" />
        <PropertyColumn Property="x => x.Priority" />
        <PropertyColumn Property="x => x.Status" />
        <PropertyColumn Property="x => x.RaisedBy" Title="Raised By" />
        <PropertyColumn Property="x => x.ExpectedDate" Title="Expected Date" Format="yyyy-MM-dd"/>
        <PropertyColumn Property="x => x.CreatedDate" Title="Created Date" Format="yyyy-MM-dd" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="GetTicketResponse" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<GetTicketResponse> dataGrid;

    MultiSelect productDDL;
    MultiSelect priorityDDL;
    MultiSelect categoryDDL;
    MultiSelect statusDDL;
    MultiSelect raisedbyDDL;

    public string Summary { get; set; }

    private List<SelectItem> products;
    private List<SelectItem> priorities;
    private List<SelectItem> categories;
    private List<SelectItem> status;
    private List<SelectItem> raisedby;

    protected override Task OnInitializedAsync()
    {
        InitializeDropDown();
        return Task.CompletedTask;
    }

    private void InitializeDropDown()
    {
        products = criteriaService.GetProducts()
                    .Select(x => new SelectItem{ Value = x.ProductId.ToString(), Text = x.ProductName })
                    .ToList();

        priorities = criteriaService.GetPriorities()
                    .Select(x => new SelectItem { Value = x.PriorityId.ToString(), Text = x.PriorityName })
                    .ToList();

        categories = criteriaService.GetCategories()
                    .Select(x => new SelectItem { Value = x.CategoryId.ToString(), Text = x.CategoryName })
                    .ToList();

        status = criteriaService.GetStatus().Select(x => new SelectItem { Value = x, Text = x }).ToList();

        raisedby = accountService.GetUsers()
                    .Select(x => new SelectItem { Value = x.Id, Text = x.Email })
                    .ToList();
    }

    private async Task<GridData<GetTicketResponse>> ServerReload(GridState<GetTicketResponse> state)
    {
        IEnumerable<GetTicketResponse> getTickets = ticketService.GetTickets(new GetTicketRequest()
        {
            summary = Summary,
            ProductId = productDDL.options.Select(x => int.Parse(x)).ToArray(),
            CategoryId = categoryDDL.options.Select(x => int.Parse(x)).ToArray(),
            PriorityId = priorityDDL.options.Select(x => int.Parse(x)).ToArray(),
            Status = statusDDL.options.ToArray(),
            RaisedBy = raisedbyDDL.options.ToArray()
        });

        await Task.Delay(300);

        var totalItems = getTickets.Count();

        var pagedData = getTickets.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<GetTicketResponse>
        {
            TotalItems = totalItems,
            Items = pagedData
        };
    }

    private void RowClick()
    {
        nav.NavigateTo($"/ticket/details/");
    }

    private Task Reset ()
    {
        productDDL.Clear();
        priorityDDL.Clear();
        categoryDDL.Clear();
        statusDDL.Clear();
        raisedbyDDL.Clear();
        Summary = string.Empty;

        return dataGrid.ReloadServerData();
    }
}
