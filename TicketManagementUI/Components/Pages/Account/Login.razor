@page "/login"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using Domain.Entities
@using Domain.Interfaces
@using Microsoft.AspNetCore.Identity

@inject IAccountService accountService
@inject SignInManager<User> signInManager
@inject NavigationManager nav

<section class="vh-100">
	<div class="container-fluid h-custom">
		<div class="row d-flex justify-content-center align-items-center h-100">
			<div class="col-md-9 col-lg-6 col-xl-5">
				<img src="/assets/imgs/login-img.jpg" class="img-fluid" alt="sample image"/>
			</div>
			<div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
				<div class="d-flex flex-row align-items-center justify-content-center justify-content-lg-start">
					<p class="lead fw-normal mb-0 me-3">Sign in with email</p>
				</div>

				<Alert @ref="alert"/>
				<EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
					<DataAnnotationsValidator />
					<hr />
					<div class="form-floating mb-3">
						<InputText @bind-Value="Input.Email" class="form-control" aria-required="true" />
						<label for="email" class="form-label">Email</label>
						<ValidationMessage For="() => Input.Email" class="text-danger" />
					</div>

					<div class="form-floating mb-3">
						<InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" />
						<label for="password" class="form-label">Password</label>
						<ValidationMessage For="() => Input.Password" class="text-danger" />
					</div>
					<div class="form-floatin mb-3">
						<InputCheckbox @bind-Value="Input.Remember" />
						Remember Me
					</div>
					<div>
						<button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</section>



@code {
	private Alert alert;	


	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	// Temporary Login User
	// protected override async Task OnInitializedAsync()
	// {
	// 	await accountService.RegisterUser(new Domain.DTO.Request.RegisterUserRequest
	// 	{
	// 		Email = "test@mail.com",
	// 		Role = "Admin"
	// 	});
	// }

	private async Task OnLogin()
	{
		var verify = await accountService.VerifyUser(Input.Email, Input.Password);
		if (!verify.IsSuccess)
		{
			alert.ShowFailed(verify.ErrorMessage);
			return;
		}

		await signInManager.PasswordSignInAsync(verify.Value, Input.Password, Input.Remember, false);
		nav.NavigateTo("/");
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; } = "";

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		public bool Remember { get; set; }
	}
}